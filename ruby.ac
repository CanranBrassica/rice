dnl Get a key from ruby's configuration table
AC_DEFUN([RUBY_CONFIG], [$RUBY -rrbconfig -e "puts Config::CONFIG[['$1']]"])

AC_DEFUN([RB_INIT_RUBY], [

AC_ARG_WITH(
    ruby,
    [  --with-ruby=PATH        The path to the ruby interpreter [[ruby]] ],
    [ RUBY=$withval ],
    [ RUBY=ruby ])
AC_SUBST(RUBY)

RUBY_CONFIG_ARCHDIR=`RUBY_CONFIG(archdir)`
RUBY_CONFIG_LIBDIR=`RUBY_CONFIG(libdir)`
RUBY_CONFIG_BINDIR=`RUBY_CONFIG(bindir)`
RUBY_CONFIG_LIBS=`RUBY_CONFIG(LIBS)`
RUBY_CONFIG_DLDLIBS=`RUBY_CONFIG(DLDLIBS)`
RUBY_CONFIG_LDFLAGS=`RUBY_CONFIG(LDFLAGS)`
RUBY_CONFIG_LIBRUBYARG=`RUBY_CONFIG(LIBRUBYARG)`
RUBY_CONFIG_LIBRUBYARG_STATIC=`RUBY_CONFIG(LIBRUBYARG_STATIC)`

RUBY_CPPFLAGS="-I${RUBY_CONFIG_ARCHDIR}"
AC_SUBST(RUBY_CPPFLAGS)

RUBY_LDFLAGS="-L${RUBY_ARCHDIR} -L${RUBY_CONFIG_LIBDIR} ${RUBY_LDFLAGS}"
AC_SUBST(RUBY_LDFLAGS)

RUBY_LIBS="${RUBY_CONFIG_LIBS} ${RUBY_CONFIG_DLDLIBS}"
AC_SUBST(RUBY_LIBS)
 
RUBY_LIBRUBYARG="${RUBY_CONFIG_LIBRUBYARG}"
AC_SUBST(RUBY_LIBRUBYARG)

RUBY_LIBRUBYARG_STATIC="${RUBY_CONFIG_LIBRUBYARG_STATIC}"
AC_SUBST(RUBY_LIBRUBYARG_STATIC)

RUBY_SITELIBDIR=`$RUBY -rrbconfig \
-e "include Config; \
puts CONFIG[['sitelibdir']].sub(CONFIG[['prefix']], '')"`
AC_SUBST(RUBY_SITELIBDIR)

dnl The fourth parameter to AC_CHECK_HEADER keeps autoconf from
dnl searching for standard header files as a side-effect (which we want)
CPPFLAGS_save="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS} ${RUBY_CPPFLAGS}"
AC_CHECK_HEADER(ruby.h,,AC_MSG_ERROR(
                could not find ruby.h (check config.log)),[ ])
AC_CHECK_HEADER(node.h,,AC_MSG_ERROR(
                could not find node.h (check config.log)),[
#include <ruby.h>
])
AC_CHECK_HEADER(version.h,,AC_MSG_ERROR(
                could not find version.h (check config.log)),[
#include <ruby.h>
])
CPPFLAGS="${CPPFLAGS_save}"

AC_MINGW32

if test x"${MINGW32}"x = xyesx; then
  RB_FIX_MINGW_LIBS
fi

]) dnl RB_INIT_RUBY

dnl We would like to be able to build using MingW against the one-click
dnl installer, which is built using VC6.  So, we detect this situation
dnl and fix up the link step if this is the case.
dnl
dnl Static linking isn't likely to work correctly, so we disable it by
dnl default, but if the user asks for LIBRUBYARG_STATIC, they'll still
dnl get static linking.
AC_DEFUN([RB_FIX_MINGW_LIBS], [
RUBY_LIBS=`echo ${RUBY_LIBS} | sed -e "s%oldnames.lib%-lmoldname%"`
RUBY_LIBS=`echo ${RUBY_LIBS} | sed -e "s%user32.lib%-luser32%"`
RUBY_LIBS=`echo ${RUBY_LIBS} | sed -e "s%advapi32.lib%-ladvapi32%"`
RUBY_LIBS=`echo ${RUBY_LIBS} | sed -e "s%ws2_32.lib%-lws2_32%"`
RUBY_LIBRUBYARG=`echo ${RUBY_LIBRUBYARG} | sed -e "s%\(msvcrt-ruby.*\).lib%${RUBY_CONFIG_BINDIR}/\1.dll%"`
RUBY_LIBRUBYARG_STATIC=`echo ${RUBY_LIBRUBYARG_STATIC} | sed -e "s%\(msvcrt-ruby.*\).lib%${RUBY_CONFIG_LIBDIR}/\1.lib%"`
]) dnl RB_FIX_MINGW_LIBS

dnl vim:ft=config
